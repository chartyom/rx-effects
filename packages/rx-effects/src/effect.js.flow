// @flow strict

import { Observable, Subscription } from 'rxjs';
import { Action } from './action';
import { StateQuery } from './stateQuery';

export type Effect<Event, Result = void, ErrorType = Error> = $ReadOnly<{
  result$: Observable<Result>,
  done$: Observable<{ event: Event, result: Result }>,
  error$: Observable<{ event: Event, error: ErrorType }>,
  final$: Observable<Event>,
  pending: StateQuery<boolean>,
  pendingCount: StateQuery<number>,

  handle: ((event$: Observable<Event>) => Subscription) &
    ((action: Action<Event>) => Subscription),
  destroy: () => void,
}>;

export type EffectHandler<Event, Result> = (
  event: Event,
) => Result | Promise<Result> | Observable<Result>;

declare export function createEffect<Event, Result = void, ErrorType = Error>(
  handler: EffectHandler<Event, Result>,
  scopeSubscriptions?: Subscription,
): Effect<Event, Result, ErrorType>;
